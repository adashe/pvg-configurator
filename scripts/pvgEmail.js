// Generate hpu email
const generateEmail = () => {
    const assemNum = pvgAssem.mppSysNum;
    const emailBody = genEmailBody();
    const priceBody = genPriceEmailBody();

    const header = `SCOTT INDUSTRIAL HYBRID CONFIGURATOR`;
    const introMsgHtml = `\n\nA new hybrid configuration has been generated by ${contactInputs.contactName}!`;
    const contactHtml = genContactEmailBody();
    const noteMsgHtml = `\n\nNOTE TO CUSTOMER: \nA customer representative will follow up shortly to provide lead times and to assist in placing your order. `;
    const thankYouMsg = `\n\nThank you for using the Scott Industrial Hybrid Configurator!`;

    const emailAddress = defaultEmail;
    const emailSubject = `Scott Industrial Hybrid Configurator: ${assemNum}`;
    const bodyText = `${
        header +
        introMsgHtml +
        contactHtml +
        emailBody +
        priceBody +
        noteMsgHtml +
        thankYouMsg
    }`;

    const mailtoLink = createMailtoLink(emailAddress, emailSubject, bodyText);

    window.location.href = mailtoLink;
};

// Generate hpu email body text
const genEmailBody = () => {
    // Build mpp sys num html
    const assemNumHtml = `\n\nMPP SYS NUMBER: ${pvgAssem.mppSysNum.toUpperCase()}-${pvgAssem.mppRevNum.toUpperCase()}`;

    // Build price html
    const price = parseFloat(pvgAssem.calcCost());
    const priceHtml = `\nHybrid Configuration List Price: $${price.toFixed(2)}`;

    // Build base donfiguration html
    const baseHtml = `
        End Plate: $$
        Tie-Rods: 20ft: $$
        Paint: ${pvgAssem.paint}: $$
        LIQ Populated: $$
        Opened Center: $$
        Power Float Manifold: $$
    `;

    // Build sections html
    /*     let sectionsHtml = '';

    for(i = 0; i < pvgAssem.numSections; i++){

        const sectionID = `section${i}`;
        const sectionNum = i + 1

        const description = pvgAssem[sectionID].description;
        const pvgSeries = pvgAssem[sectionID].pvgSeries;
        const actuation = pvgAssem[sectionID].actuation;
        const spoolType = pvgAssem[sectionID].spoolType;
        const gpm = pvgAssem[sectionID].gpm;
        const portRelA = pvgAssem[sectionID].portRelA;
        const portRelB = pvgAssem[sectionID].portRelB;

        const section = `
            \n\n
            SECTION ${sectionNum}: ${description}
            PVG Series: ${pvgSeries}
            Actuation: ${actuation}
            Spool Type: ${spoolType}
            ${gpm} gpm
            Port Relief A: ${portRelA} psi
            Port Relief B: ${portRelB} psi
            Cost: $$
        `;

        sectionsHtml += section;
    };
 */
    const html = assemNumHtml + baseHtml + priceHtml;

    return html;
};

// Generate HPU total cost email body text
const genPriceEmailBody = () => {
    const total = parseFloat(pvgAssem.calcCost());

    html = `\n\nTOTAL LIST PRICE: $${total.toFixed(2)}`;

    return html;
};
